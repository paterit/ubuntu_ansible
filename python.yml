- name: Install python environments and tools
  hosts: localhost

  tasks:
    - name: Install pyenv
      block:
        - name: Install pyenv dependencies
          become: true # Run tasks as root
          ansible.builtin.apt:
            name:
              - build-essential
              - zlib1g-dev
              - libffi-dev
              - libssl-dev
              - libbz2-dev
              - libreadline-dev
              - libsqlite3-dev
              - liblzma-dev
              - tk-dev
              - python3-pip
              - python3-venv
              - python3-dev
              - python3-apt
            state: present

        - name: Install pyenv with homebrew
          become: false # Run tasks as normal user
          community.general.homebrew:
            name:
              - pyenv
              - pyenv-virtualenv
            state: present

        - name: Add pyenv to Zsh
          ansible.builtin.blockinfile:
            path: "{{ ansible_env.HOME }}/.zshrc"
            marker: "# {mark} PYENV ANSIBLE MANAGED BLOCK"
            block: |
              # Pyenv
              export PYENV_ROOT="$HOME/.pyenv"
              [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
              eval "$(pyenv init -)"
              eval "$(pyenv virtualenv-init -)"

        - name: Install last stable versions of python under pyenv
          ansible.builtin.shell:
            cmd: ". ~/.zshrc && pyenv install -s {{ item }}"
            executable: /bin/zsh
            creates: "~/.pyenv/versions/{{ item }}"
          loop:
            - "3.10.13"
            - "3.11.6"

        - name: Install 3.12 version of python under pyenv # https://github.com/pyenv/pyenv/issues/2823
          ansible.builtin.shell:
            cmd: |
              brew unlink pkg-config
              . ~/.zshrc && pyenv install -s 3.12.0
            executable: /bin/zsh
            creates: "~/.pyenv/versions/3.12.0"

    - name: Install pipx
      block:
        - name: Install pipx with pip
          become: false # Run tasks as normal user

          ansible.builtin.pip:
            name: pipx
            extra_args: --user
            state: present

        - name: Add pipx to Zsh
          ansible.builtin.blockinfile:
            path: "{{ ansible_env.HOME }}/.zshrc"
            marker: "# {mark} PIPX ANSIBLE MANAGED BLOCK"
            block: |
              export PATH="$HOME/.local/bin:$PATH"
              autoload -Uz compinit
              compinit
              eval "$(register-python-argcomplete pipx)"

    - name: Poetry
      block:
        - name: Install poetry dependencies
          become: true # Run tasks as root
          ansible.builtin.apt:
            name:
              - curl
              - python3-distutils
            state: present

        - name: Install poetry with pipx
          community.general.pipx:
            name: poetry
            state: present

        - name: Create zsh plugin folder for poetry
          ansible.builtin.shell:
            cmd: "mkdir -p {{ ansible_env.HOME }}/.oh-my-zsh/plugins/poetry"
            executable: /bin/zsh
            creates: "{{ ansible_env.HOME }}/.oh-my-zsh/plugins/poetry"

        - name: Generate poetry autocomplete
          ansible.builtin.shell:
            cmd: "~/.local/bin/poetry completions zsh > {{ ansible_env.HOME }}/.oh-my-zsh/plugins/poetry/_poetry"
            executable: /bin/zsh
            creates: "{{ ansible_env.HOME }}/.oh-my-zsh/plugins/poetry/_poetry"

        - name: Poetry will create venv in project folder
          ansible.builtin.shell:
            cmd: ~/.local/bin/poetry config virtualenvs.in-project true
            creates: "{{ ansible_env.HOME }}/.config/pypoetry/config.toml"
            executable: /bin/zsh
